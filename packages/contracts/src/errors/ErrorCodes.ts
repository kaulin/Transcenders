/**
 * Hierarchical error codes for all services
 * Format: SERVICE_CATEGORY_SPECIFIC
 * Start minimal - add more codes as needed during implementation
 */
export const ERROR_CODES = {
  // Common errors across services
  COMMON: {
    FASTIFY_ERROR: 'COMMON_FASTIFY_ERROR',
    VALIDATION_REQUIRED_FIELD: 'COMMON_VALIDATION_REQUIRED_FIELD',
    VALIDATION_CONSTRAINT_VIOLATION: 'COMMON_VALIDATION_CONSTRAINT_VIOLATION',
    VALIDATION_FAILED: 'COMMON_VALIDATION_FAILED',
    RESOURCE_NOT_FOUND: 'COMMON_RESOURCE_NOT_FOUND',
    RESOURCE_ALREADY_EXISTS: 'COMMON_RESOURCE_ALREADY_EXISTS',
    DATABASE_CONNECTION_FAILED: 'COMMON_DATABASE_CONNECTION_FAILED',
    INTERNAL_SERVER_ERROR: 'COMMON_INTERNAL_SERVER_ERROR',
    UNAUTHORIZED_ACCESS: 'COMMON_UNAUTHORIZED_ACCESS',
    FORBIDDEN_ACCESS: 'COMMON_FORBIDDEN_ACCESS',
    UNKNOWN_ERROR: 'COMMON_UNKNOWN_ERROR',
  },

  // Auth service specific errors
  AUTH: {
    INVALID_CREDENTIALS: 'AUTH_INVALID_CREDENTIALS',
    TOKEN_EXPIRED: 'AUTH_TOKEN_EXPIRED',
    USER_ALREADY_EXISTS: 'AUTH_USER_ALREADY_EXISTS',
    PASSWORD_TOO_WEAK: 'AUTH_PASSWORD_TOO_WEAK',
    REGISTRATION_FAILED: 'AUTH_REGISTRATION_FAILED',
  },

  // User service specific errors
  USER: {
    USERNAME_ALREADY_EXISTS: 'USER_USERNAME_ALREADY_EXISTS',
    EMAIL_ALREADY_EXISTS: 'USER_EMAIL_ALREADY_EXISTS',
    NOT_FOUND_BY_ID: 'USER_NOT_FOUND_BY_ID',
    NOT_FOUND_BY_USERNAME: 'USER_NOT_FOUND_BY_USERNAME',
    NOT_FOUND_BY_EMAIL: 'USER_NOT_FOUND_BY_EMAIL',
    AVATAR_UPLOAD_FAILED: 'USER_AVATAR_UPLOAD_FAILED',
    INVALID_FILE_TYPE: 'USER_INVALID_FILE_TYPE',
    FILE_TOO_LARGE: 'USER_FILE_TOO_LARGE',
    FILE_NOT_PROVIDED: 'USER_FILE_NOT_PROVIDED',
    FRIENDSHIP_ALREADY_EXISTS: 'USER_FRIENDSHIP_ALREADY_EXISTS',
    FRIENDSHIP_NOT_FOUND: 'USER_FRIENDSHIP_NOT_FOUND',
    FRIEND_REQUEST_NOT_FOUND: 'USER_FRIEND_REQUEST_NOT_FOUND',
    FRIEND_REQUEST_ALREADY_EXISTS: 'USER_FRIEND_REQUEST_ALREADY_EXISTS',
    CANNOT_BEFRIEND_SELF: 'USER_CANNOT_BEFRIEND_SELF',
  },

  // Score service specific errors
  SCORE: {
    SCORE_CREATION_FAILED: 'SCORE_SCORE_CREATION_FAILED',
    INVALID_SCORE_VALUE: 'SCORE_INVALID_SCORE_VALUE',
    MATCH_NOT_FOUND: 'SCORE_MATCH_NOT_FOUND',
    DUPLICATE_SCORE_ENTRY: 'SCORE_DUPLICATE_SCORE_ENTRY',
    STATS_CALCULATION_FAILED: 'SCORE_STATS_CALCULATION_FAILED',
  },
} as const;

// Type for all possible error codes
type ValuesOf<T> = T extends Record<string, infer U> ? ValuesOf<U> : T;
export type ErrorCode = ValuesOf<typeof ERROR_CODES>;
// Helper function to get all error codes as an array
export function getAllErrorCodes(): string[] {
  const codes: string[] = [];

  Object.values(ERROR_CODES).forEach((serviceErrors) => {
    Object.values(serviceErrors).forEach((code) => {
      codes.push(code);
    });
  });

  return codes;
}

// Helper function to validate if a code exists
export function isValidErrorCode(code: string): boolean {
  return getAllErrorCodes().includes(code);
}
